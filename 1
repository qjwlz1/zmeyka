import pygame
import random
import sys

SCREEN_WIDTH = 660
SCREEN_HEIGHT = 510
GRID_SIZE = 30
GRID_WIDTH = SCREEN_WIDTH / GRID_SIZE
GRID_HEIGHT = SCREEN_HEIGHT / GRID_SIZE
FPS = 10

UP = (0, -1)
DOWN = (0, 1)
LEFT = (-1, 0)
RIGHT = (1, 0)

WHITE = (255, 255, 255)
GREEN = (0, 217, 51)
RED = (255, 0, 0)
BLACK = (41, 10, 46)
PINK =(255, 69, 125)
PURPLE = (123, 25, 168)

pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Snake')

def is_opposite_direction(current_direction, new_direction):
    return (current_direction[0] + new_direction[0] == 0) and (current_direction[1] + new_direction[1] == 0)

def draw_score(score):
    font = pygame.font.SysFont(None, 24)
    text = font.render(f'Score: {score}', True, WHITE)
    screen.blit(text, (10, 10))

def draw_grid():
    for x in range(0, int(GRID_WIDTH)):
        for y in range(0, int(GRID_HEIGHT)):
            rect = pygame.Rect((x * GRID_SIZE, y * GRID_SIZE), (GRID_SIZE, GRID_SIZE))
            pygame.draw.rect(screen, PINK, rect, 1)

def draw_game_over():
    font = pygame.font.SysFont(None, 48)
    text = font.render('Game Over! Press any key to exit.', True, GREEN)
    text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))
    screen.blit(text, text_rect)
    pygame.display.update()

def main():
    clock = pygame.time.Clock()
    snake = [(10, 15), (11, 15), (12, 15)]
    direction = RIGHT
    score = 0
    apple = (10, 10)

    while True:
        clock.tick(FPS)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and direction != DOWN:
                    direction = UP
                elif event.key == pygame.K_DOWN and direction != UP:
                    direction = DOWN
                elif event.key == pygame.K_LEFT and direction != RIGHT:
                    direction = LEFT
                elif event.key == pygame.K_RIGHT and direction != LEFT:
                    direction = RIGHT

        new_head = (snake[0][0] + direction[0], snake[0][1]  + direction[1])

        if new_head[0] < 0 or new_head[0] >= GRID_WIDTH or new_head[1] < 0 or new_head[1] >= GRID_HEIGHT or new_head in snake[1]:
            draw_game_over()
            while True:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
                        pygame.quit()
                        sys.exit()
                    elif event.type == pygame.KEYDOWN:
                        pygame.quit()
                        sys.exit()

        snake.insert(0, new_head)

        if snake[0] == apple:
            apple = (random.randint(0, GRID_WIDTH - 1), random.randint(0, GRID_HEIGHT - 1))
            score += 1
        else:
            snake.pop()

        screen.fill(BLACK)
        draw_grid()
        draw_score(score)
        for pos in snake:
            rect = pygame.Rect((pos[0] * GRID_SIZE, pos[1] * GRID_SIZE), (GRID_SIZE, GRID_SIZE))
            pygame.draw.rect(screen, PURPLE, rect)
        rect = pygame.Rect((apple[0] * GRID_SIZE, apple[1] * GRID_SIZE), (GRID_SIZE, GRID_SIZE))
        pygame.draw.rect(screen, GREEN, rect)
        pygame.display.update()

if __name__ == '__main__':
    main()
